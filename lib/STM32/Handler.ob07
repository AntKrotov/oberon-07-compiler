(*
    BSD 2-Clause License

    Copyright (c) 2020, Anton Krotov
    All rights reserved.
*)

MODULE Handler;

IMPORT SYSTEM;


CONST

    SRAM = 20000000H;
        Interrupt = SRAM;
        Trap      = SRAM + 4;


TYPE

    TrapProc* = PROCEDURE (modNum, modName, err, line: INTEGER);

    IntProc*  = PROCEDURE (iv: INTEGER);


VAR

    _trap: TrapProc;


PROCEDURE defInt (n: INTEGER);
END defInt;


PROCEDURE defTrap (modNum, modName, err, line: INTEGER);
BEGIN
    IF _trap # NIL THEN
        _trap(modNum, modName, err, line)
    END
END defTrap;


PROCEDURE SetTrap* (trap: TrapProc);
BEGIN
    _trap := trap
END SetTrap;


PROCEDURE SetInt* (int: IntProc);
VAR
    a: INTEGER;

BEGIN
    IF int = NIL THEN
        int := defInt
    END;
    SYSTEM.GET(SYSTEM.ADR(int), a);
    SYSTEM.PUT(Interrupt, a + 1)
END SetInt;


BEGIN
    SYSTEM.PUT(Interrupt, SYSTEM.ADR(defInt) + 1);
    SYSTEM.PUT(Trap, SYSTEM.ADR(defTrap) + 1);
    _trap := NIL
END Handler.