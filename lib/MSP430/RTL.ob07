(*
    BSD 2-Clause License

    Copyright (c) 2019, Anton Krotov
    All rights reserved.
*)

MODULE RTL;

IMPORT SYSTEM;


CONST

    SP = 1;
    SR = 2;
    CG = 3;
    R4 = 4;
    R5 = 5;
    BP = 15;

    ram_adr = 200H;
    iv_adr  = 0FFC0H;

    sp_adr         = iv_adr - 2;
    empty_proc_adr = sp_adr - 2;
    bits_adr       = empty_proc_adr - 272;
    bits_offs_adr  = bits_adr - 32;
    types_adr      = bits_offs_adr - 2;

    trap_adr = ram_adr;
    int_adr  = trap_adr + 2;


TYPE

    TRAPPROC = PROCEDURE (module, err: INTEGER);

    INTPROC = PROCEDURE (priority, ptr: INTEGER);


PROCEDURE _shift* (op, n, x: INTEGER): INTEGER;
BEGIN
    n := ORD(BITS(n) * {0..3});

    CASE op OF
    |0: WHILE n > 0 DO x := LSL(x, 1); DEC(n) END
    |1: WHILE n > 0 DO x := ASR(x, 1); DEC(n) END
    |2: WHILE n > 0 DO x := ROR(x, 1); DEC(n) END
    |3: WHILE n > 0 DO x := LSR(x, 1); DEC(n) END
    END

    RETURN x
END _shift;


PROCEDURE _mul* (a, b: INTEGER): INTEGER;
VAR
    res: INTEGER;

BEGIN
    res := 0;

    WHILE b # 0 DO
        IF ODD(b) THEN
            INC(res, a)
        END;
        b := LSR(b, 1);
        INC(a, a)
    END

    RETURN res
END _mul;


PROCEDURE _move* (bytes, dest, source: INTEGER);
VAR
    byte:  BYTE;

BEGIN
    WHILE bytes > 0 DO
        SYSTEM.GET(source, byte);
        SYSTEM.PUT8(dest, byte);
        INC(source);
        INC(dest);
        DEC(bytes)
    END
END _move;


PROCEDURE _arrcpy* (base_size, len_dst, dst, len_src, src: INTEGER): BOOLEAN;
VAR
    res: BOOLEAN;

BEGIN
    IF len_src > len_dst THEN
        res := FALSE
    ELSE
        _move(len_src * base_size, dst, src);
        res := TRUE
    END

    RETURN res
END _arrcpy;


PROCEDURE _strcpy* (len_dst, dst, len_src, src: INTEGER);
BEGIN
    _move(MIN(len_dst, len_src), dst, src)
END _strcpy;


PROCEDURE _strcpy2* (len_src, src, len_dst, dst: INTEGER);
BEGIN
    _move(MIN(len_dst, len_src), dst, src)
END _strcpy2;


PROCEDURE _rot* (VAR A: ARRAY OF INTEGER);
VAR
    i, n, k: INTEGER;

BEGIN

    k := LEN(A) - 1;
    n := A[0];
    i := 0;
    WHILE i < k DO
        A[i] := A[i + 1];
        INC(i)
    END;
    A[k] := n

END _rot;


PROCEDURE _set* (b, a: INTEGER): INTEGER;
BEGIN
    IF (a <= b) & (a <= 15) & (b >= 0) THEN
        IF b > 15 THEN
            b := 15
        END;
        IF a < 0 THEN
            a := 0
        END;
        DEC(b, a);
        SYSTEM.GET(bits_offs_adr + b * 2, b);
        SYSTEM.GET(bits_adr + b + a * 2, b)
    ELSE
        b := 0
    END

    RETURN b
END _set;


PROCEDURE _set1* (a: INTEGER): INTEGER;
BEGIN
    IF BITS(a) * {4..15} = {} THEN
        SYSTEM.GET(bits_adr + a * 2, a)
    ELSE
        a := 0
    END

    RETURN a
END _set1;


PROCEDURE _in2* (i, s: INTEGER): BOOLEAN;
BEGIN
    SYSTEM.GET(bits_adr + i * 2, i)
    RETURN BITS(i) * BITS(s) # {}
END _in2;


PROCEDURE _in* (s, i: INTEGER): BOOLEAN;
BEGIN
    IF BITS(i) * {4..15} = {} THEN
        SYSTEM.GET(bits_adr + i * 2, i);
        s := ORD(BITS(i) * BITS(s))
    ELSE
        s := 0
    END

    RETURN s # 0
END _in;


PROCEDURE _incl* (VAR s: SET; i: INTEGER);
BEGIN
    IF BITS(i) * {4..15} = {} THEN
        SYSTEM.GET(bits_adr + i * 2, i);
        s := s + BITS(i)
    END
END _incl;


PROCEDURE _excl* (VAR s: SET; i: INTEGER);
BEGIN
    IF BITS(i) * {4..15} = {} THEN
        SYSTEM.GET(bits_adr + i * 2, i);
        s := s - BITS(i)
    END
END _excl;


PROCEDURE divmod (a, b: INTEGER; VAR mod: INTEGER): INTEGER;
VAR
    res, c, r: INTEGER;

BEGIN
    res := 0;

    WHILE (a >= b) OR (a < 0) DO
        r := 2;
        c := b * 2;
        WHILE (c > 0) & (ABS(a) >= c) DO
            c := c * 2;
            r := r * 2
        END;

        IF a < 0 THEN
            INC(a, LSR(c, 1));
            DEC(res, LSR(r, 1))
        ELSE
            DEC(a, LSR(c, 1));
            INC(res, LSR(r, 1))
        END
    END;

    mod := a

    RETURN res
END divmod;


PROCEDURE _div* (b, a: INTEGER): INTEGER;
VAR
    mod: INTEGER;

BEGIN
    RETURN divmod(a, b, mod)
END _div;


PROCEDURE _mod* (b, a: INTEGER): INTEGER;
VAR
    mod: INTEGER;

BEGIN
    a := divmod(a, b, mod)
    RETURN mod
END _mod;


PROCEDURE _length* (len, str: INTEGER): INTEGER;
BEGIN
    SYSTEM.CODE(
    4016H + BP * 100H, 4,  (* MOV 4(BP), R6; R6 <- len *)
    4017H + BP * 100H, 6,  (* MOV 6(BP), R7; R7 <- str *)
    4304H,                 (* MOV #0, R4; res := 0 *)
                           (* L2: *)
    4775H,                 (* MOV.B @R7+, R5 *)
    9305H,                 (* CMP #0, R5 *)
    2400H + 3,             (* JZ L1 *)
    5314H,                 (* ADD #1, R4 *)
    8316H,                 (* SUB #1, R6 *)
    2000H + 3FAH,          (* JNZ L2 *)
                           (* L1: *)
    4130H + BP,            (* MOV @SP+, BP *)
    4130H                  (* MOV @SP+, PC *)
    )
    RETURN 0
END _length;


PROCEDURE strncmp (a, b, n: INTEGER): INTEGER;
VAR
    A, B: CHAR;
    res:  INTEGER;

BEGIN
    res := 0;
    WHILE n > 0 DO
        SYSTEM.GET(a, A); INC(a);
        SYSTEM.GET(b, B); INC(b);
        DEC(n);
        IF A # B THEN
            res := ORD(A) - ORD(B);
            n := 0
        ELSIF A = 0X THEN
            n := 0
        END
    END
    RETURN res
END strncmp;


PROCEDURE _strcmp* (op, len2, str2, len1, str1: INTEGER): BOOLEAN;
VAR
    res:  INTEGER;
    bRes: BOOLEAN;

BEGIN

    res := strncmp(str1, str2, MIN(len1, len2));
    IF res = 0 THEN
        res := _length(len1, str1) - _length(len2, str2)
    END;

    CASE op OF
    |0: bRes := res =  0
    |1: bRes := res #  0
    |2: bRes := res <  0
    |3: bRes := res <= 0
    |4: bRes := res >  0
    |5: bRes := res >= 0
    END

    RETURN bRes
END _strcmp;


PROCEDURE _strcmp2* (op, len1, str1, len2, str2: INTEGER): BOOLEAN;
    RETURN _strcmp(op, len2, str2, len1, str1)
END _strcmp2;


PROCEDURE _is* (t0, p: INTEGER): BOOLEAN;
VAR
    t1: INTEGER;

BEGIN
    (* p IS t0 *)

    IF p # 0 THEN
        DEC(p, 2);
        SYSTEM.GET(p, t1);
        WHILE (t1 # 0) & (t1 # t0) DO
            SYSTEM.GET(types_adr - t1 * 2, t1)
        END
    ELSE
        t1 := -1
    END

    RETURN t1 = t0
END _is;


PROCEDURE _guard* (t0, p: INTEGER): BOOLEAN;
VAR
    t1:  INTEGER;

BEGIN
    (* p IS t0 *)

    SYSTEM.GET(p, p);
    IF p # 0 THEN
        DEC(p, 2);
        SYSTEM.GET(p, t1);
        WHILE (t1 # t0) & (t1 # 0) DO
            SYSTEM.GET(types_adr - t1 * 2, t1)
        END
    ELSE
        t1 := t0
    END

    RETURN t1 = t0
END _guard;


PROCEDURE _guardrec* (t0, t1: INTEGER): BOOLEAN;
BEGIN
    (* r:t1 IS t0 *)

    WHILE (t1 # 0) & (t1 # t0) DO
        SYSTEM.GET(types_adr - t1 * 2, t1)
    END

    RETURN t1 = t0
END _guardrec;


PROCEDURE _error* (module, err: INTEGER);
BEGIN
    SYSTEM.CODE(
    0C232H,                   (*  BIC   #8, SR; DINT      *)
    4303H,                    (*  MOV   R3, R3; NOP       *)
    4010H + SR * 100H + SP,   (*  MOV   sp_adr(SR), SP    *)
    sp_adr,
    1210H + BP, 0006H,        (*  PUSH  6(BP)             *)
    1210H + BP, 0004H,        (*  PUSH  4(BP)             *)
    1210H + BP, 0002H,        (*  PUSH  2(BP)             *)
    1210H + BP, 0000H,        (*  PUSH  0(BP)             *)
    4000H + SP * 100H + BP,   (*  MOV   SP, BP            *)
    4010H + SR * 100H + R4,   (*  MOV   trap_adr(SR), R4  *)
    trap_adr,
    9000H + CG * 100H + R4,   (*  TST   R4                *)
    2400H + 5,                (*  JZ    L                 *)
    1210H + BP, 0006H,        (*  PUSH  6(BP)             *)
    1210H + BP, 0004H,        (*  PUSH  4(BP)             *)
    1280H + R4,               (*  CALL  R4                *)
                              (*  L:                      *)
    0D032H, 0010H             (*  BIS   #10H, SR; CPUOFF  *)
    )
END _error;


PROCEDURE SetTrap* (trap: TRAPPROC);
BEGIN
    SYSTEM.PUT(trap_adr, trap)
END SetTrap;


PROCEDURE SetInt* (int: INTPROC);
BEGIN
    SYSTEM.PUT(int_adr, int)
END SetInt;


END RTL.