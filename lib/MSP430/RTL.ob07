(*
    BSD 2-Clause License

    Copyright (c) 2019, Anton Krotov
    All rights reserved.
*)

MODULE RTL;

IMPORT SYSTEM;


CONST

    HP = 14;
    BP = 15;

    ram_adr = 200H;
    iv_adr  = 0FFC0H;

    sp_adr         = iv_adr - 2;
    empty_proc_adr = sp_adr - 2;
    bits_adr       = empty_proc_adr - 272;
    bits_offs_adr  = bits_adr - 32;
    types_adr      = bits_offs_adr - 2;

    trap_adr = ram_adr;
    int_adr  = trap_adr + 2;


TYPE

    TRAPPROC = PROCEDURE (module, err: INTEGER);

    INTPROC = PROCEDURE (priority, ptr: INTEGER);


PROCEDURE [code] _lsl* (n, x: INTEGER): INTEGER
    4115H, 2,              (*  MOV  2(SP), R5; R5 <- n  *)
    4114H, 4,              (*  MOV  4(SP), R4; R4 <- x  *)
    0F035H, 15,            (*  AND  #15, R5             *)
    2400H + 3,             (*  JZ   L1                  *)
                           (*  L2:                      *)
    5404H,                 (*  ADD  R4, R4              *)
    8315H,                 (*  SUB  #1, R5              *)
    2000H + 400H - 3;      (*  JNZ  L2                  *)
                           (*  L1:                      *)


PROCEDURE [code] _asr* (n, x: INTEGER): INTEGER
    4115H, 2,              (*  MOV  2(SP), R5; R5 <- n  *)
    4114H, 4,              (*  MOV  4(SP), R4; R4 <- x  *)
    0F035H, 15,            (*  AND  #15, R5             *)
    2400H + 3,             (*  JZ   L1                  *)
                           (*  L2:                      *)
    1104H,                 (*  RRA  R4                  *)
    8315H,                 (*  SUB  #1, R5              *)
    2000H + 400H - 3;      (*  JNZ  L2                  *)
                           (*  L1:                      *)


PROCEDURE [code] _ror* (n, x: INTEGER): INTEGER
    4115H, 2,              (*  MOV  2(SP), R5; R5 <- n  *)
    4114H, 4,              (*  MOV  4(SP), R4; R4 <- x  *)
    0F035H, 15,            (*  AND  #15, R5             *)
    2400H + 5,             (*  JZ   L1                  *)
    4406H,                 (*  MOV  R4, R6              *)
                           (*  L2:                      *)
    1006H,                 (*  RRC  R6                  *)
    1004H,                 (*  RRC  R4                  *)
    8315H,                 (*  SUB  #1, R5              *)
    2000H + 400H - 4;      (*  JNZ  L2                  *)
                           (*  L1:                      *)


PROCEDURE [code] _lsr* (n, x: INTEGER): INTEGER
    4115H, 2,              (*  MOV  2(SP), R5; R5 <- n  *)
    4114H, 4,              (*  MOV  4(SP), R4; R4 <- x  *)
    0F035H, 15,            (*  AND  #15, R5             *)
    2400H + 4,             (*  JZ   L1                  *)
                           (*  L2:                      *)
    0C312H,                (*  BIC  #1, SR              *)
    1004H,                 (*  RRC  R4                  *)
    8315H,                 (*  SUB  #1, R5              *)
    2000H + 400H - 4;      (*  JNZ  L2                  *)
                           (*  L1:                      *)


PROCEDURE [code] _mul* (a, b: INTEGER): INTEGER
    4115H, 2,              (*  MOV  2(SP), R5; R5 <- a  *)
    4116H, 4,              (*  MOV  4(SP), R6; R6 <- b  *)
    4304H,                 (*  MOV  #0, R4; res := 0    *)
    9306H,                 (*  CMP  #0, R6              *)
    2400H + 7,             (*  JZ   L1                  *)
                           (*  L2:                      *)
    0B316H,                (*  BIT  #1, R6              *)
    2400H + 1,             (*  JZ   L3                  *)
    5504H,                 (*  ADD  R5, R4              *)
                           (*  L3:                      *)
    5505H,                 (*  ADD  R5, R5              *)
    0C312H,                (*  BIC  #1, SR              *)
    1006H,                 (*  RRC  R6                  *)
    2000H + 400H - 7;      (*  JNZ  L2                  *)
                           (*  L1:                      *)


PROCEDURE [code] _move* (bytes, dest, source: INTEGER)
    4116H, 2,              (*  MOV    2(SP), R6; R6 <- bytes   *)
    4117H, 4,              (*  MOV    4(SP), R7; R7 <- dest    *)
    4115H, 6,              (*  MOV    6(SP), R5; R5 <- source  *)
    9306H,                 (*  CMP    #0, R6                   *)
    3800H + 6,             (*  JL     L1                       *)
    2400H + 5,             (*  JZ     L1                       *)
                           (*  L2:                             *)
    45F7H, 0,              (*  MOV.B  @R5+, 0(R7)              *)
    5317H,                 (*  ADD    #1, R7                   *)
    8316H,                 (*  SUB    #1, R6                   *)
    2000H + 400H - 5;      (*  JNZ    L2                       *)
                           (*  L1:                             *)


PROCEDURE [code] _rot* (len, adr: INTEGER)
    4114H, 2,              (*  MOV    2(SP), R4; R4 <- len   *)
    4115H, 4,              (*  MOV    4(SP), R5; R5 <- adr   *)
    8314H,                 (*  SUB    #1, R4                 *)
    5404H,                 (*  ADD    R4, R4                 *)
    1225H,                 (*  PUSH   @R5                    *)
    4406H,                 (*  MOV    R4, R6                 *)
                           (*  L1:                           *)
    4595H, 2, 0,           (*  MOV    2(R5), 0(R5)           *)
    5325H,                 (*  ADD    #2, R5                 *)
    8326H,                 (*  SUB    #2, R6                 *)
    2000H + 400H - 6,      (*  JNZ    L1                     *)
    41B5H, 0;              (*  MOV    @SP+, 0(R5)            *)


PROCEDURE [code] _set* (b, a: INTEGER): SET
    4114H, 2,              (*  MOV  2(SP), R4; R4 <- b  *)
    4115H, 4,              (*  MOV  4(SP), R5; R5 <- a  *)
    9504H,                 (*  CMP  R5, R4              *)
    3800H + 24,            (*  JL   L1                  *)
    9035H, 16,             (*  CMP  #16, R5             *)
    3400H + 21,            (*  JGE  L1                  *)
    9304H,                 (*  CMP  #0, R4              *)
    3800H + 19,            (*  JL   L1                  *)
    9034H, 16,             (*  CMP  #16, R4             *)
    3800H + 2,             (*  JL   L2                  *)
    4034H, 15,             (*  MOV  #15, R4             *)
                           (*  L2:                      *)
    9305H,                 (*  CMP  #0, R5              *)
    3400H + 1,             (*  JGE  L3                  *)
    4305H,                 (*  MOV  #0, R5              *)
                           (*  L3:                      *)
    8504H,                 (*  SUB  R5, R4              *)
    5404H,                 (*  ADD  R4, R4              *)
    5034H, bits_offs_adr,  (*  ADD  bits_offs_adr, R4   *)
    4424H,                 (*  MOV  @R4, R4             *)
    5505H,                 (*  ADD  R5, R5              *)
    5405H,                 (*  ADD  R4, R5              *)
    5035H, bits_adr,       (*  ADD  bits_adr, R5        *)
    4524H,                 (*  MOV  @R5, R4             *)
    4130H,                 (*  MOV  @SP+, PC            *)
                           (*  L1:                      *)
    4304H;                 (*  MOV  #0, R4              *)


PROCEDURE [code] _set1* (a: INTEGER): SET
    4114H, 2,              (*  MOV  2(SP), R4; R4 <- a  *)
    0B034H, 0FFF0H,        (*  BIT  #0FFF0H, R4         *)
    2000H + 5,             (*  JNZ  L1                  *)
    5404H,                 (*  ADD  R4, R4              *)
    5034H, bits_adr,       (*  ADD  bits_adr, R4        *)
    4424H,                 (*  MOV  @R4, R4             *)
    4130H,                 (*  MOV  @SP+, PC            *)
                           (*  L1:                      *)
    4304H;                 (*  MOV  #0, R4              *)


PROCEDURE [code] _in2* (i, s: INTEGER): BOOLEAN
    4114H, 2,               (*  MOV  2(SP), R4; R4 <- i  *)
    5404H,                  (*  ADD  R4, R4              *)
    5034H, bits_adr,        (*  ADD  bits_adr, R4        *)
    4424H,                  (*  MOV  @R4, R4             *)
    0F114H, 4,              (*  AND  4(SP), R4           *)
    2400H + 1,              (*  JZ   L1                  *)
    4314H;                  (*  MOV  #1, R4              *)
                            (*  L1:                      *)


PROCEDURE [code] _in* (s, i: INTEGER): BOOLEAN
    4114H, 4,               (*  MOV  4(SP), R4; R4 <- i  *)
    0B034H, 0FFF0H,         (*  BIT  #0FFF0H, R4         *)
    2000H + 9,              (*  JNZ  L2                  *)
    5404H,                  (*  ADD  R4, R4              *)
    5034H, bits_adr,        (*  ADD  bits_adr, R4        *)
    4424H,                  (*  MOV  @R4, R4             *)
    0F114H, 2,              (*  AND  2(SP), R4           *)
    2400H + 3,              (*  JZ   L1                  *)
    4314H,                  (*  MOV  #1, R4              *)
    4130H,                  (*  MOV  @SP+, PC            *)
                            (*  L2:                      *)
    4304H;                  (*  MOV  #0, R4              *)
                            (*  L1:                      *)


PROCEDURE [code] _incl* (VAR s: SET; i: INTEGER)
    4114H, 4,          (*  MOV  4(SP), R4; R4 <- i  *)
    0B034H, 0FFF0H,    (*  BIT  #0FFF0H, R4         *)
    2000H + 8,         (*  JNZ  L1                  *)
    5404H,             (*  ADD  R4, R4              *)
    5034H, bits_adr,   (*  ADD  bits_adr, R4        *)
    4424H,             (*  MOV  @R4, R4             *)
    4115H, 2,          (*  MOV  2(SP), R5; R5 <- @s *)
    0D485H, 0;         (*  BIS  R4, 0(R5)           *)
                       (*  L1:                      *)


PROCEDURE [code] _excl* (VAR s: SET; i: INTEGER)
    4114H, 4,          (*  MOV  4(SP), R4; R4 <- i  *)
    0B034H, 0FFF0H,    (*  BIT  #0FFF0H, R4         *)
    2000H + 8,         (*  JNZ  L1                  *)
    5404H,             (*  ADD  R4, R4              *)
    5034H, bits_adr,   (*  ADD  bits_adr, R4        *)
    4424H,             (*  MOV  @R4, R4             *)
    4115H, 2,          (*  MOV  2(SP), R5; R5 <- @s *)
    0C485H, 0;         (*  BIC  R4, 0(R5)           *)
                       (*  L1:                      *)


PROCEDURE [code] _divmod* (b, a: INTEGER): INTEGER (* res -> R4, mod -> R5 *)
    4115H, 4,              (*  MOV  4(SP), R5; R5 <- a  *)
    4304H,                 (*  MOV  #0, R4              *)
                           (*  L1:                      *)
    4116H, 2,              (*  MOV  2(SP), R6; R6 <- b  *)
    9605H,                 (*  CMP  R6, R5              *)
    3800H + 17,            (*  JL   L3                  *)
    4327H,                 (*  MOV  #2, R7              *)
    5606H,                 (*  ADD  R6, R6              *)
                           (*  L4:                      *)
    9306H,                 (*  CMP  #0, R6              *)
    2400H + 6,             (*  JZ   L2                  *)
    3800H + 5,             (*  JL   L2                  *)
    9605H,                 (*  CMP  R6, R5              *)
    3800H + 3,             (*  JL   L2                  *)
    5606H,                 (*  ADD  R6, R6              *)
    5707H,                 (*  ADD  R7, R7              *)
    3C00H + 400H - 8,      (*  JMP  L4                  *)
                           (*  L2:                      *)
    0C312H,                (*  BIC  #1, SR              *)
    1006H,                 (*  RRC  R6                  *)
    0C312H,                (*  BIC  #1, SR              *)
    1007H,                 (*  RRC  R7                  *)
    8605H,                 (*  SUB  R6, R5              *)
    5704H,                 (*  ADD  R7, R4              *)
    3C00H + 400H - 21,     (*  JMP  L1                  *)
                           (*  L3:                      *)
    (*----------- (a < 0) --------------*)
                           (*  L1:                      *)
    9305H,                 (*  CMP  #0, R5              *)
    3400H + 23,            (*  JGE  L3                  *)
    4116H, 2,              (*  MOV  2(SP), R6; R6 <- b  *)
    4327H,                 (*  MOV  #2, R7              *)
    5606H,                 (*  ADD  R6, R6              *)
    0E335H,                (*  XOR  #-1, R5             *)
    5315H,                 (*  ADD  #1,  R5             *)
                           (*  L4:                      *)
    9306H,                 (*  CMP  #0, R6              *)
    2400H + 6,             (*  JZ   L2                  *)
    3800H + 5,             (*  JL   L2                  *)
    9605H,                 (*  CMP  R6, R5              *)
    3800H + 3,             (*  JL   L2                  *)
    5606H,                 (*  ADD  R6, R6              *)
    5707H,                 (*  ADD  R7, R7              *)
    3C00H + 400H - 8,      (*  JMP  L4                  *)
                           (*  L2:                      *)
    0E335H,                (*  XOR  #-1, R5             *)
    5315H,                 (*  ADD  #1,  R5             *)
    0C312H,                (*  BIC  #1, SR              *)
    1006H,                 (*  RRC  R6                  *)
    0C312H,                (*  BIC  #1, SR              *)
    1007H,                 (*  RRC  R7                  *)
    5605H,                 (*  ADD  R6, R5              *)
    8704H,                 (*  SUB  R7, R4              *)
    3C00H + 400H - 25;     (*  JMP  L1                  *)
                           (*  L3:                      *)


PROCEDURE [code] _guardrec* (t0, t1: INTEGER): INTEGER
    4114H, 2,              (*  MOV  2(SP), R4; R4 <- t0  *)
    4115H, 4,              (*  MOV  4(SP), R5; R5 <- t1  *)
    4036H, types_adr,      (*  MOV  #types_adr, R6       *)
                           (*  L3:                       *)
    9305H,                 (*  CMP  #0, R5               *)
    2400H + 8,             (*  JZ   L1                   *)
    9405H,                 (*  CMP  R4, R5               *)
    2400H + 10,            (*  JZ   L2                   *)
    5505H,                 (*  ADD  R5, R5               *)
    0E335H,                (*  XOR  #-1, R5              *)
    5315H,                 (*  ADD  #1, R5               *)
    5605H,                 (*  ADD  R6, R5               *)
    4525H,                 (*  MOV  @R5, R5              *)
    3C00H + 400H - 10,     (*  JMP  L3                   *)
                           (*  L1:                       *)
    9405H,                 (*  CMP  R4, R5               *)
    2400H + 2,             (*  JZ   L2                   *)
    4304H,                 (*  MOV  #0, R4               *)
    4130H,                 (*  MOV  @SP+, PC             *)
                           (*  L2:                       *)
    4314H;                 (*  MOV  #1, R4               *)


PROCEDURE [code] _error* (module, err, line: INTEGER)
    0C232H,               (*  BIC   #8, SR; DINT             *)
    4303H,                (*  MOV   R3, R3; NOP              *)
    4114H, 2,             (*  MOV   2(SP), R4; R4 <- module  *)
    4115H, 4,             (*  MOV   4(SP), R5; R5 <- err     *)
    4116H, 6,             (*  MOV   6(SP), R6; R6 <- line    *)
    4211H, sp_adr,        (*  MOV   sp_adr(SR), SP           *)
    1206H,                (*  PUSH  R6                       *)
    1204H,                (*  PUSH  R4                       *)
    1205H,                (*  PUSH  R5                       *)
    4214H, trap_adr,      (*  MOV   trap_adr(SR), R4         *)
    9304H,                (*  TST   R4                       *)
    2400H + 1,            (*  JZ    L                        *)
    1284H,                (*  CALL  R4                       *)
                          (*  L:                             *)
    04032H, 10H;          (*  MOV   #10H, SR; CPUOFF         *)


PROCEDURE [code] _new* (t, size: INTEGER; VAR ptr: INTEGER)
    1202H,                  (*  PUSH SR            *)
    4302H,                  (*  MOV  #0, SR        *)
    4303H,                  (*  NOP                *)
    4104H,                  (*  MOV  SP, R4        *)
    8034H, 16,              (*  SUB  #16, R4       *)
    4005H + 100H * HP,      (*  MOV  HP, R5        *)
    5115H, 6,               (*  ADD  6(SP), R5     *)
    9504H,                  (*  CMP  R5, R4        *)
    4114H, 8,               (*  MOV  8(SP), R4     *)
    3800H + 12,             (*  JL   L1            *)
    4190H + HP, 4, 0,       (*  MOV  4(SP), 0(HP)  *)
    5320H + HP,             (*  ADD  #2, HP        *)
    4084H + 100H * HP, 0,   (*  MOV  HP, 0(R4)     *)
                            (*  L3                 *)
    4380H + HP, 0,          (*  MOV  #0, 0(HP)     *)
    5320H + HP,             (*  ADD  #2, HP        *)
    9500H + HP,             (*  CMP  R5, HP        *)
    3800H + 400H - 5,       (*  JL   L3            *)
    3C00H + 2,              (*  JMP  L2            *)
                            (*  L1                 *)
    4384H, 0,               (*  MOV  #0, 0(R4)     *)
                            (*  L2                 *)
    1300H;                  (*  RETI               *)


PROCEDURE [code] _length* (len, str: INTEGER): INTEGER
    4116H, 2,              (*  MOV    2(SP), R6; R6 <- len  *)
    4117H, 4,              (*  MOV    4(SP), R7; R7 <- str  *)
    4304H,                 (*  MOV    #0, R4; res := 0      *)
                           (*  L2:                          *)
    4775H,                 (*  MOV.B  @R7+, R5              *)
    9305H,                 (*  CMP    #0, R5                *)
    2400H + 3,             (*  JZ     L1                    *)
    5314H,                 (*  ADD    #1, R4                *)
    8316H,                 (*  SUB    #1, R6                *)
    2000H + 400H - 6;      (*  JNZ    L2                    *)
                           (*  L1:                          *)


PROCEDURE strncmp (a, b, n: INTEGER): INTEGER;
VAR
    A, B: CHAR;

BEGIN
    WHILE n > 0 DO
        SYSTEM.GET(a, A); INC(a);
        SYSTEM.GET(b, B); INC(b);
        DEC(n);
        IF A # B THEN
            n := 0
        ELSIF A = 0X THEN
            n := 0
        END
    END
    RETURN ORD(A) - ORD(B)
END strncmp;


PROCEDURE _strcmp* (op, len2, str2, len1, str1: INTEGER): BOOLEAN;
VAR
    res:  INTEGER;
    bRes: BOOLEAN;

BEGIN

    res := strncmp(str1, str2, MIN(len1, len2));
    IF res = 0 THEN
        res := _length(len1, str1) - _length(len2, str2)
    END;

    CASE op OF
    |0: bRes := res =  0
    |1: bRes := res #  0
    |2: bRes := res <  0
    |3: bRes := res <= 0
    |4: bRes := res >  0
    |5: bRes := res >= 0
    END

    RETURN bRes
END _strcmp;


PROCEDURE _arrcpy* (base_size, len_dst, dst, len_src, src: INTEGER);
BEGIN
    IF len_src <= len_dst THEN
        _move(len_src * base_size, dst, src);
        SYSTEM.CODE(
        4314H,         (*  MOV  #1, R4     *)
        4130H + BP,    (*  MOV  @SP+, BP   *)
        4130H          (*  MOV  @SP+, PC   *)
        )
    END;
    SYSTEM.CODE(4304H) (*  MOV  #0, R4     *)
END _arrcpy;


PROCEDURE _is* (t, p: INTEGER): INTEGER;
BEGIN
    IF p # 0 THEN
        SYSTEM.GET(p - 2, p)
    END

    RETURN _guardrec(t, p)
END _is;


PROCEDURE _guard* (t, p: INTEGER): INTEGER;
BEGIN
    SYSTEM.GET(p, p);
    IF p # 0 THEN
        SYSTEM.GET(p - 2, p);
        t := _guardrec(t, p)
    ELSE
        t := 1
    END

    RETURN t
END _guard;


END RTL.