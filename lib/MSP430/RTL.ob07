(*
    BSD 2-Clause License

    Copyright (c) 2019, Anton Krotov
    All rights reserved.
*)

MODULE RTL;

IMPORT SYSTEM;


CONST

    SR = 2;
    BP = 15;

    sp_adr = 0FFBEH;
    types_adr = sp_adr - 2;


TYPE

    TRAPPROC = PROCEDURE (module, err: INTEGER);

    INTPROC = PROCEDURE (priority, sr, pc: INTEGER);

    INTREC = RECORD priority, sr, pc: INTEGER END;


VAR

    trap:  TRAPPROC;
    int:   INTPROC;


PROCEDURE _shift* (op, x, n: INTEGER): INTEGER;
BEGIN
    n := ORD(BITS(n) * {0..3});

    WHILE n > 0 DO
        CASE op OF
        |0: x := LSL(x, 1)
        |1: x := ASR(x, 1)
        |2: x := ROR(x, 1)
        |3: x := LSR(x, 1)
        END;
        DEC(n)
    END

    RETURN x
END _shift;


PROCEDURE _shift2* (op, n, x: INTEGER): INTEGER;
    RETURN _shift(op, x, n)
END _shift2;


PROCEDURE _mul* (a, b: INTEGER): INTEGER;
VAR
    res: INTEGER;

BEGIN
    res := 0;

    WHILE b # 0 DO
        IF ODD(b) THEN
            INC(res, a)
        END;
        b := LSR(b, 1);
        INC(a, a)
    END

    RETURN res
END _mul;


PROCEDURE _move* (bytes, source, dest: INTEGER);
VAR
    byte:  BYTE;

BEGIN
    WHILE bytes > 0 DO
        SYSTEM.GET(source, byte);
        SYSTEM.PUT8(dest, byte);
        INC(source);
        INC(dest);
        DEC(bytes)
    END
END _move;


PROCEDURE _move2* (bytes, dest, source: INTEGER);
BEGIN
    _move(bytes, source, dest)
END _move2;


PROCEDURE _arrcpy* (base_size, len_dst, dst, len_src, src: INTEGER): BOOLEAN;
VAR
    res: BOOLEAN;

BEGIN
    IF len_src > len_dst THEN
        res := FALSE
    ELSE
        _move(len_src * base_size, src, dst);
        res := TRUE
    END

    RETURN res
END _arrcpy;


PROCEDURE _strcpy* (len_dst, dst, len_src, src: INTEGER);
BEGIN
    _move(MIN(len_dst, len_src), src, dst)
END _strcpy;


PROCEDURE _strcpy2* (len_src, src, len_dst, dst: INTEGER);
BEGIN
    _move(MIN(len_dst, len_src), src, dst)
END _strcpy2;


PROCEDURE _rot* (VAR A: ARRAY OF INTEGER);
VAR
    i, n, k: INTEGER;

BEGIN

    k := LEN(A) - 1;
    n := A[0];
    i := 0;
    WHILE i < k DO
        A[i] := A[i + 1];
        INC(i)
    END;
    A[k] := n

END _rot;


PROCEDURE _set2* (a, b: INTEGER): INTEGER;
VAR
    res: INTEGER;

BEGIN
    IF (a <= b) & (a <= 15) & (b >= 0) THEN
        IF b > 15 THEN
            b := 15
        END;
        IF a < 0 THEN
            a := 0
        END;
        res := LSR(ASR(ROR(1, 1), b - a), 15 - b)
    ELSE
        res := 0
    END

    RETURN res
END _set2;


PROCEDURE _set* (b, a: INTEGER): INTEGER;
    RETURN _set2(a, b)
END _set;


PROCEDURE _in2* (i, s: INTEGER): BOOLEAN;
    RETURN (BITS(i) * {4..15} = {}) & ODD(ASR(s, i))
END _in2;


PROCEDURE _in* (s, i: INTEGER): BOOLEAN;
    RETURN (BITS(i) * {4..15} = {}) & ODD(ASR(s, i))
END _in;


PROCEDURE _incl* (VAR s: SET; i: INTEGER);
BEGIN
    IF BITS(i) * {4..15} = {} THEN
        s := s + BITS(LSL(1, i))
    END
END _incl;


PROCEDURE _excl* (VAR s: SET; i: INTEGER);
BEGIN
    IF BITS(i) * {4..15} = {} THEN
        s := s - BITS(LSL(1, i))
    END
END _excl;


PROCEDURE divmod (a, b: INTEGER; VAR mod: INTEGER): INTEGER;
VAR
    res: INTEGER;

BEGIN
    res := 0;

    WHILE a >= b DO
        DEC(a, b);
        INC(res)
    END;

    WHILE a < 0 DO
        INC(a, b);
        DEC(res)
    END;

    mod := a

    RETURN res
END divmod;


PROCEDURE _div2* (a, b: INTEGER): INTEGER;
VAR
    mod: INTEGER;

BEGIN
    RETURN divmod(a, b, mod)
END _div2;


PROCEDURE _mod2* (a, b: INTEGER): INTEGER;
VAR
    div, mod: INTEGER;

BEGIN
    div := divmod(a, b, mod)
    RETURN mod
END _mod2;


PROCEDURE _div* (b, a: INTEGER): INTEGER;
    RETURN _div2(a, b)
END _div;


PROCEDURE _mod* (b, a: INTEGER): INTEGER;
    RETURN _mod2(a, b)
END _mod;


PROCEDURE _length* (len, str: INTEGER): INTEGER;
VAR
    c:   CHAR;
    res: INTEGER;

BEGIN
    res := 0;
    REPEAT
        SYSTEM.GET(str, c); INC(str);
        DEC(len);
        INC(res)
    UNTIL (c = 0X) OR (len = 0);

    IF c = 0X THEN
        DEC(res)
    END

    RETURN res
END _length;


PROCEDURE strncmp (a, b, n: INTEGER): INTEGER;
VAR
    A, B: CHAR;
    res:  INTEGER;

BEGIN
    res := 0;
    WHILE n > 0 DO
        SYSTEM.GET(a, A); INC(a);
        SYSTEM.GET(b, B); INC(b);
        DEC(n);
        IF A # B THEN
            res := ORD(A) - ORD(B);
            n := 0
        ELSIF A = 0X THEN
            n := 0
        END
    END
    RETURN res
END strncmp;


PROCEDURE _strcmp* (op, len2, str2, len1, str1: INTEGER): BOOLEAN;
VAR
    res:  INTEGER;
    bRes: BOOLEAN;

BEGIN

    res := strncmp(str1, str2, MIN(len1, len2));
    IF res = 0 THEN
        res := _length(len1, str1) - _length(len2, str2)
    END;

    CASE op OF
    |0: bRes := res =  0
    |1: bRes := res #  0
    |2: bRes := res <  0
    |3: bRes := res <= 0
    |4: bRes := res >  0
    |5: bRes := res >= 0
    END

    RETURN bRes
END _strcmp;


PROCEDURE _strcmp2* (op, len1, str1, len2, str2: INTEGER): BOOLEAN;
    RETURN _strcmp(op, len2, str2, len1, str1)
END _strcmp2;


PROCEDURE _error* (module, err: INTEGER);
BEGIN
    SYSTEM.CODE(
    0C232H,              (*  BIC   #8, SR; DINT    *)
    4404H,               (*  MOV   R4, R4; NOP     *)
    4011H + SR * 100H,   (*  MOV   sp_adr(SR), SP  *)
    sp_adr,
    1210H + BP, 0006H,   (*  PUSH  6(BP)           *)
    1210H + BP, 0004H,   (*  PUSH  4(BP)           *)
    1210H + BP, 0002H,   (*  PUSH  2(BP)           *)
    1210H + BP, 0000H,   (*  PUSH  0(BP)           *)
    4100H + BP,          (*  MOV   SP, BP          *)
    );

    IF trap # NIL THEN
        trap(module, err)
    END;

    SYSTEM.CODE(0D032H, 0010H) (* BIS #10H, SR; CPUOFF  *)
END _error;


PROCEDURE _isrec* (t0, t1, r: INTEGER): BOOLEAN;
BEGIN
    (* r IS t0 *)

    WHILE (t1 # 0) & (t1 # t0) DO
        SYSTEM.GET(types_adr - t1 * 2, t1)
    END

    RETURN t1 = t0
END _isrec;


PROCEDURE _is* (t0, p: INTEGER): BOOLEAN;
VAR
    t1: INTEGER;

BEGIN
    (* p IS t0 *)

    IF p # 0 THEN
        DEC(p, 2);
        SYSTEM.GET(p, t1);
        WHILE (t1 # 0) & (t1 # t0) DO
            SYSTEM.GET(types_adr - t1 * 2, t1)
        END
    ELSE
        t1 := -1
    END

    RETURN t1 = t0
END _is;


PROCEDURE _guardrec* (t0, t1: INTEGER): BOOLEAN;
BEGIN
    (* r:t1 IS t0 *)

    WHILE (t1 # 0) & (t1 # t0) DO
        SYSTEM.GET(types_adr - t1 * 2, t1)
    END

    RETURN t1 = t0
END _guardrec;


PROCEDURE _guard* (t0, p: INTEGER): BOOLEAN;
VAR
    t1:  INTEGER;

BEGIN
    (* p IS t0 *)

    SYSTEM.GET(p, p);
    IF p # 0 THEN
        DEC(p, 2);
        SYSTEM.GET(p, t1);
        WHILE (t1 # t0) & (t1 # 0) DO
            SYSTEM.GET(types_adr - t1 * 2, t1)
        END
    ELSE
        t1 := t0
    END

    RETURN t1 = t0
END _guard;


PROCEDURE _int* (interrupt: INTREC);
BEGIN
    IF int # NIL THEN
        int(interrupt.priority, interrupt.sr, interrupt.pc)
    END
END _int;


PROCEDURE SetTrap* (_trap: TRAPPROC);
BEGIN
    trap := _trap
END SetTrap;


PROCEDURE SetInt* (_int: INTPROC);
BEGIN
    int := _int
END SetInt;


END RTL.