(*
    BSD 2-Clause License

    Copyright (c) 2020, Anton Krotov
    All rights reserved.
*)

MODULE HOST;

IMPORT SYSTEM, RTL, TRAP;


CONST

    slash* = "\";
    OS* = "EMUL";

    bit_depth* = RTL.bit_depth;
    maxint* = RTL.maxint;
    minint* = RTL.minint;


VAR

    eol*: ARRAY 3 OF CHAR;

    maxreal*: REAL;


PROCEDURE [code] ExitProcess* (code: INTEGER)
    2041H, 0DF00H;

PROCEDURE [code] GetCurrentDirectory* (VAR path: ARRAY OF CHAR)
    2042H, 0DF00H;

PROCEDURE [code] GetArg* (n: INTEGER; VAR s: ARRAY OF CHAR)
    2043H, 0DF00H;

PROCEDURE [code] FileRead* (F: INTEGER; VAR Buffer: ARRAY OF CHAR; bytes: INTEGER): INTEGER
    2044H, 0DF00H;

PROCEDURE [code] FileWrite* (F: INTEGER; Buffer: ARRAY OF BYTE; bytes: INTEGER): INTEGER
    2045H, 0DF00H;

PROCEDURE [code] FileCreate* (FName: ARRAY OF CHAR): INTEGER
    2046H, 0DF00H;

PROCEDURE [code] FileClose* (F: INTEGER)
    2047H, 0DF00H;

PROCEDURE [code] FileOpen* (FName: ARRAY OF CHAR): INTEGER
    2048H, 0DF00H;

PROCEDURE [code] OutChar* (c: CHAR)
    2049H, 0DF00H;

PROCEDURE [code] GetTickCount* (): INTEGER
    204AH, 0DF00H;

PROCEDURE [code] now* (VAR year, month, day, hour, min, sec: INTEGER)
    204BH, 0DF00H;


PROCEDURE UnixTime* (): INTEGER;
    RETURN 0
END UnixTime;


PROCEDURE isRelative* (path: ARRAY OF CHAR): BOOLEAN;

    PROCEDURE letter (c: CHAR): BOOLEAN;
        RETURN ("a" <= c) & (c <= "z") OR ("A" <= c) & (c <= "Z")
    END letter;

    RETURN ~(letter(path[0]) & (path[1] = ":"))
END isRelative;


PROCEDURE d2s* (x: REAL): INTEGER;
VAR
    res: INTEGER;
BEGIN
    SYSTEM.GET(SYSTEM.ADR(x), res)
    RETURN res
END d2s;


PROCEDURE s2d (x: INTEGER; VAR h, l: INTEGER);
VAR
    s, e, f: INTEGER;

BEGIN
    s := ASR(x, 31) MOD 2;
    f := x MOD 800000H;
    e := (x DIV 800000H) MOD 256;
    IF e = 255 THEN
        e := 2047
    ELSIF (e # 0) OR (f # 0) THEN
        e := e - 127 + 1023
    END;
    h := LSL(s, 31) + LSL(e, 20) + (f DIV 8);
    l := (f MOD 8) * 20000000H
END s2d;


PROCEDURE splitf* (x: REAL; VAR a, b: INTEGER): INTEGER;
VAR
    i: INTEGER;

BEGIN
    SYSTEM.GET(SYSTEM.ADR(x), i);
    s2d(i, b, a)
    RETURN a
END splitf;


BEGIN
    RTL.SetTrap(TRAP.trap);
    eol[0] := 0DX; eol[1] := 0AX; eol[2] := 0X;
    maxreal := 1.9;
    PACK(maxreal, 127)
END HOST.