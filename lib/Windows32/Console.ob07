(*
    Copyright 2013, 2018 Anton Krotov

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*)

MODULE Console;

IMPORT SYSTEM, WINAPI, In, Out;


CONST

    Black* = 0;     Blue* = 1;          Green* = 2;       Cyan* = 3;
    Red* = 4;       Magenta* = 5;       Brown* = 6;       LightGray* = 7;
    DarkGray* = 8;  LightBlue* = 9;     LightGreen* = 10; LightCyan* = 11;
    LightRed* = 12; LightMagenta* = 13; Yellow* = 14;     White* = 15;


VAR

    hConsoleOutput: INTEGER;


PROCEDURE IntToCard16 (i: INTEGER): SYSTEM.CARD16;
VAR
    w: SYSTEM.CARD16;

BEGIN
    SYSTEM.GET(SYSTEM.ADR(i), w)
    RETURN w
END IntToCard16;


PROCEDURE Card16ToInt (w: SYSTEM.CARD16): INTEGER;
VAR
    i: INTEGER;

BEGIN
    SYSTEM.PUT(SYSTEM.ADR(i), w)
    RETURN i
END Card16ToInt;


PROCEDURE CoordToInt (Coord: WINAPI.TCoord): INTEGER;
VAR
    res: INTEGER;

BEGIN
    SYSTEM.GET(SYSTEM.ADR(Coord), res)
    RETURN res
END CoordToInt;


PROCEDURE SetCursor* (X, Y: INTEGER);
VAR
    Coord: WINAPI.TCoord;

BEGIN
    Coord.X := IntToCard16(X);
    Coord.Y := IntToCard16(Y);
    WINAPI.SetConsoleCursorPosition(hConsoleOutput, CoordToInt(Coord))
END SetCursor;


PROCEDURE GetCursor* (VAR X, Y: INTEGER);
VAR
    ScrBufInfo: WINAPI.TConsoleScreenBufferInfo;

BEGIN
    WINAPI.GetConsoleScreenBufferInfo(hConsoleOutput, ScrBufInfo);
    X := Card16ToInt(ScrBufInfo.dwCursorPosition.X);
    Y := Card16ToInt(ScrBufInfo.dwCursorPosition.Y)
END GetCursor;


PROCEDURE Cls*;
VAR
    fill: INTEGER;
    ScrBufInfo: WINAPI.TConsoleScreenBufferInfo;

BEGIN
    WINAPI.GetConsoleScreenBufferInfo(hConsoleOutput, ScrBufInfo);
    fill := Card16ToInt(ScrBufInfo.dwSize.X) * Card16ToInt(ScrBufInfo.dwSize.Y);
    WINAPI.FillConsoleOutputCharacter(hConsoleOutput, 20H, fill, 0, SYSTEM.ADR(fill));
    WINAPI.FillConsoleOutputAttribute(hConsoleOutput, Card16ToInt(ScrBufInfo.wAttributes), fill, 0, SYSTEM.ADR(fill));
    SetCursor(0, 0)
END Cls;


PROCEDURE SetColor* (FColor, BColor: INTEGER);
BEGIN
    IF (FColor IN {0..15}) & (BColor IN {0..15}) THEN
        WINAPI.SetConsoleTextAttribute(hConsoleOutput, LSL(BColor, 4) + FColor)
    END
END SetColor;


PROCEDURE GetCursorX* (): INTEGER;
VAR
    ScrBufInfo: WINAPI.TConsoleScreenBufferInfo;

BEGIN
    WINAPI.GetConsoleScreenBufferInfo(hConsoleOutput, ScrBufInfo)
    RETURN Card16ToInt(ScrBufInfo.dwCursorPosition.X)
END GetCursorX;


PROCEDURE GetCursorY* (): INTEGER;
VAR
    ScrBufInfo: WINAPI.TConsoleScreenBufferInfo;

BEGIN
    WINAPI.GetConsoleScreenBufferInfo(hConsoleOutput, ScrBufInfo)
    RETURN Card16ToInt(ScrBufInfo.dwCursorPosition.Y)
END GetCursorY;


PROCEDURE open*;
BEGIN
    WINAPI.AllocConsole;
    hConsoleOutput := WINAPI.GetStdHandle(-11);
    In.Open;
    Out.Open
END open;


PROCEDURE exit* (b: BOOLEAN);
BEGIN
    WINAPI.FreeConsole
END exit;


END Console.