(*
    Copyright 2013, 2014, 2017, 2018 Anton Krotov

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*)

MODULE WINAPI;

IMPORT sys := SYSTEM;


CONST

    OFS_MAXPATHNAME* = 128;


TYPE

    STRING = ARRAY 260 OF CHAR;

    TCoord* = RECORD

        X*, Y*: sys.CARD16

    END;

    TSmallRect* = RECORD

        Left*, Top*, Right*, Bottom*: sys.CARD16

    END;

    TConsoleScreenBufferInfo* = RECORD

        dwSize*:               TCoord;
        dwCursorPosition*:     TCoord;
        wAttributes*:          sys.CARD16;
        srWindow*:             TSmallRect;
        dwMaximumWindowSize*:  TCoord

    END;

    TSystemTime* = RECORD

        Year*,
        Month*,
        DayOfWeek*,
        Day*,
        Hour*,
        Min*,
        Sec*,
        MSec*:  sys.CARD16

    END;

    PSecurityAttributes* = POINTER TO TSecurityAttributes;

    TSecurityAttributes* = RECORD

        nLength*:               INTEGER;
        lpSecurityDescriptor*:  INTEGER;
        bInheritHandle*:        INTEGER

    END;

    TFileTime* = RECORD

        dwLowDateTime*,
        dwHighDateTime*: INTEGER

    END;

    TWin32FindData* = RECORD

        dwFileAttributes*:    SET;
        ftCreationTime*:      TFileTime;
        ftLastAccessTime*:    TFileTime;
        ftLastWriteTime*:     TFileTime;
        nFileSizeHigh*:       INTEGER;
        nFileSizeLow*:        INTEGER;
        dwReserved0*:         INTEGER;
        dwReserved1*:         INTEGER;
        cFileName*:           STRING;
        cAlternateFileName*:  ARRAY 14 OF CHAR

    END;

    OFSTRUCT* = RECORD

        cBytes*:      CHAR;
        fFixedDisk*:  CHAR;
        nErrCode*:    sys.CARD16;
        Reserved1*:   sys.CARD16;
        Reserved2*:   sys.CARD16;
        szPathName*:  ARRAY OFS_MAXPATHNAME OF CHAR

    END;

    POverlapped* = POINTER TO OVERLAPPED;

    OVERLAPPED* = RECORD

        Internal*:      INTEGER;
        InternalHigh*:  INTEGER;
        Offset*:        INTEGER;
        OffsetHigh*:    INTEGER;
        hEvent*:        INTEGER

    END;


PROCEDURE [winapi, "kernel32.dll", "SetConsoleCursorPosition"]
    SetConsoleCursorPosition* (hConsoleOutput, dwCursorPosition: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "GetConsoleScreenBufferInfo"]
    GetConsoleScreenBufferInfo* (hConsoleOutput: INTEGER; ConsoleScreenBufferInfo: TConsoleScreenBufferInfo): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "FillConsoleOutputCharacterA"]
    FillConsoleOutputCharacter* (hConsoleOutput, cCaracter, nLength, dwWriteCoord, lpNumberOfCharsWritten: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "FillConsoleOutputAttribute"]
    FillConsoleOutputAttribute* (hConsoleOutput, wAttribute, nLength, dwWriteCoord, lpNumberOfAttrsWritten: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "SetConsoleTextAttribute"]
    SetConsoleTextAttribute* (hConsoleOutput, wAttributes: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "GetStdHandle"]
    GetStdHandle* (nStdHandle: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "GetLocalTime"]
    GetLocalTime* (T: TSystemTime);

PROCEDURE [winapi, "kernel32.dll", "RemoveDirectoryA"]
    RemoveDirectory* (lpPathName: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "GetFileAttributesA"]
    GetFileAttributes* (lpPathName: INTEGER): SET;

PROCEDURE [winapi, "kernel32.dll", "CreateDirectoryA"]
    CreateDirectory* (lpPathName: INTEGER; lpSecurityAttributes: PSecurityAttributes): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "FindFirstFileA"]
    FindFirstFile* (lpFileName: INTEGER; lpFindFileData: TWin32FindData): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "DeleteFileA"]
    DeleteFile* (lpFileName: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "FindClose"]
    FindClose* (hFindFile: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "CloseHandle"]
    CloseHandle* (hObject: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "CreateFileA"]
    CreateFile* (
        lpFileName, dwDesiredAccess, dwShareMode: INTEGER;
        lpSecurityAttributes: PSecurityAttributes;
        dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "OpenFile"]
    OpenFile* (lpFileName: INTEGER; lpReOpenBuff: OFSTRUCT; uStyle: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "SetFilePointer"]
    SetFilePointer* (hFile, lDistanceToMove, lpDistanceToMoveHigh, dwMoveMethod: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "ReadFile"]
    ReadFile* (hFile, Buffer, nNumberOfBytesToRead, lpNumberOfBytesRead: INTEGER; lpOverlapped: POverlapped): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "WriteFile"]
    WriteFile* (hFile, Buffer, nNumberOfBytesToRead, lpNumberOfBytesRead: INTEGER; lpOverlapped: POverlapped): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "ReadConsoleA"]
    ReadConsole* (hConsoleInput, lpBuffer, nNumberOfCharsToRead, lpNumberOfCharsRead, lpReserved: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "GetCommandLineA"]
    GetCommandLine* (): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "GlobalAlloc"]
    GlobalAlloc* (uFlags, dwBytes: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "GlobalFree"]
    GlobalFree* (hMem: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "WriteConsoleW"]
    WriteConsoleW* (hConsoleOutput, lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, lpReserved: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "ExitProcess"]
    ExitProcess* (code: INTEGER);

PROCEDURE [winapi, "kernel32.dll", "WriteConsoleA"]
    WriteConsole* (hConsoleOutput, lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, lpReserved: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "GetTickCount"]
    GetTickCount* (): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "Sleep"]
    Sleep* (dwMilliseconds: INTEGER);

PROCEDURE [winapi, "kernel32.dll", "FreeLibrary"]
    FreeLibrary* (hLibModule: INTEGER): INTEGER;

PROCEDURE [cdecl, "msvcrt.dll", "rand"]
    rand* (): INTEGER;

PROCEDURE [cdecl, "msvcrt.dll", "srand"]
    srand* (seed: INTEGER);

PROCEDURE [winapi, "user32.dll", "MessageBoxA"]
    MessageBoxA* (hWnd, lpText, lpCaption, uType: INTEGER): INTEGER;

PROCEDURE [winapi, "user32.dll", "MessageBoxW"]
    MessageBox* (hWnd, lpText, lpCaption, uType: INTEGER): INTEGER;

PROCEDURE [winapi, "user32.dll", "CreateWindowExA"]
    CreateWindowEx* (
        dwExStyle, lpClassName, lpWindowName, dwStyle, X, Y,
        nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "GetProcAddress"]
    GetProcAddress* (hModule, name: INTEGER): INTEGER;

PROCEDURE [winapi, "kernel32.dll", "LoadLibraryA"]
    LoadLibraryA* (name: INTEGER): INTEGER;       
    
PROCEDURE [winapi, "kernel32.dll", "AllocConsole"]
    AllocConsole* (): BOOLEAN;
    
PROCEDURE [winapi, "kernel32.dll", "FreeConsole"]
    FreeConsole* (): BOOLEAN;


END WINAPI.