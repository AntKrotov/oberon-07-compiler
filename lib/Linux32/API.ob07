(*
    BSD 2-Clause License

    Copyright (c) 2019, Anton Krotov
    All rights reserved.
*)

MODULE API;

IMPORT SYSTEM;


CONST

    SIZE_OF_DWORD = 4;


TYPE

    TP* = ARRAY 2 OF INTEGER;


VAR

    eol*:  ARRAY 2 OF CHAR;
    base*, MainParam*: INTEGER;

    libc*, librt*: INTEGER;

    dlopen*        : PROCEDURE [ccall16] (filename, flag: INTEGER): INTEGER;
    dlsym*         : PROCEDURE [ccall16] (handle, symbol: INTEGER): INTEGER;

    stdout*,
    stdin*,
    stderr*        : INTEGER;

    malloc*        : PROCEDURE [ccall16] (size: INTEGER): INTEGER;
    free*          : PROCEDURE [ccall16] (ptr: INTEGER);
    _exit*         : PROCEDURE [ccall16] (code: INTEGER);
    puts*          : PROCEDURE [ccall16] (pStr: INTEGER);
    fwrite*,
    fread*         : PROCEDURE [ccall16] (buffer, bytes, blocks, file: INTEGER): INTEGER;
    fopen*         : PROCEDURE [ccall16] (fname, fmode: INTEGER): INTEGER;
    fclose*        : PROCEDURE [ccall16] (file: INTEGER): INTEGER;

    clock_gettime* : PROCEDURE [ccall16] (clock_id: INTEGER; VAR tp: TP): INTEGER;
    time*          : PROCEDURE [ccall16] (ptr: INTEGER): INTEGER;


PROCEDURE putc* (c: CHAR);
VAR
    res: INTEGER;

BEGIN
    res := fwrite(SYSTEM.ADR(c), 1, 1, stdout)
END putc;


PROCEDURE DebugMsg* (lpText, lpCaption: INTEGER);
BEGIN
    puts(lpCaption);
    puts(lpText)
END DebugMsg;


PROCEDURE _NEW* (size: INTEGER): INTEGER;
VAR
    res, ptr, dwords: INTEGER;

BEGIN
    res := malloc(size);
    IF res # 0 THEN
        ptr := res;
        dwords := size DIV SIZE_OF_DWORD;
        WHILE dwords > 0 DO
            SYSTEM.PUT(ptr, 0);
            INC(ptr, SIZE_OF_DWORD);
            DEC(dwords)
        END
    END

    RETURN res
END _NEW;


PROCEDURE _DISPOSE* (p: INTEGER): INTEGER;
BEGIN
    free(p)
    RETURN 0
END _DISPOSE;


PROCEDURE GetProcAdr (lib: INTEGER; name: ARRAY OF CHAR; VarAdr: INTEGER);
VAR
    sym: INTEGER;
BEGIN
    sym := dlsym(lib, SYSTEM.ADR(name[0]));
    ASSERT(sym # 0);
    SYSTEM.PUT(VarAdr, sym)
END GetProcAdr;


PROCEDURE init* (esp, code: INTEGER);
BEGIN
    SYSTEM.GET(code - 1000H - SIZE_OF_DWORD * 2, dlopen);
    SYSTEM.GET(code - 1000H - SIZE_OF_DWORD,     dlsym);
    eol := 0AX;
    base := 08048000H;
    MainParam := esp + SIZE_OF_DWORD;

    libc := dlopen(SYSTEM.SADR("libc.so.6"), 1);
    GetProcAdr(libc, "malloc", SYSTEM.ADR(malloc));
    GetProcAdr(libc, "free", SYSTEM.ADR(free));
    GetProcAdr(libc, "exit", SYSTEM.ADR(_exit));
    GetProcAdr(libc, "stdout", SYSTEM.ADR(stdout));
    GetProcAdr(libc, "stdin", SYSTEM.ADR(stdin));
    GetProcAdr(libc, "stderr", SYSTEM.ADR(stderr));
    SYSTEM.GET(stdout - 4, stdout);
    SYSTEM.GET(stdin - 4, stdin);
    SYSTEM.GET(stderr - 4, stderr);
    GetProcAdr(libc, "puts", SYSTEM.ADR(puts));
    GetProcAdr(libc, "fwrite", SYSTEM.ADR(fwrite));
    GetProcAdr(libc, "fread", SYSTEM.ADR(fread));
    GetProcAdr(libc, "fopen", SYSTEM.ADR(fopen));
    GetProcAdr(libc, "fclose", SYSTEM.ADR(fclose));
    GetProcAdr(libc, "time", SYSTEM.ADR(time));

    librt := dlopen(SYSTEM.SADR("librt.so.1"), 1);
    GetProcAdr(librt, "clock_gettime", SYSTEM.ADR(clock_gettime));
END init;


PROCEDURE exit* (code: INTEGER);
BEGIN
    _exit(code)
END exit;


PROCEDURE exit_thread* (code: INTEGER);
BEGIN
    _exit(code)
END exit_thread;


END API.