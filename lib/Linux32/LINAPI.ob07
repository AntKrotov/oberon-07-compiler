(*
    BSD 2-Clause License

    Copyright (c) 2019, Anton Krotov
    All rights reserved.
*)

MODULE LINAPI;

IMPORT SYSTEM, API;


CONST

    SIZE_OF_DWORD = 4;


TYPE

    TP* = API.TP;


VAR

    argc*, envc*: INTEGER;

    libc*, librt*: INTEGER;

    stdout*,
    stdin*,
    stderr*        : INTEGER;

    malloc*        : PROCEDURE [ccall] (size: INTEGER): INTEGER;
    free*          : PROCEDURE [ccall] (ptr: INTEGER);
    exit*          : PROCEDURE [ccall] (code: INTEGER);
    puts*          : PROCEDURE [ccall] (pStr: INTEGER);
    fwrite*,
    fread*         : PROCEDURE [ccall] (buffer, bytes, blocks, file: INTEGER): INTEGER;
    fopen*         : PROCEDURE [ccall] (fname, fmode: INTEGER): INTEGER;
    fclose*        : PROCEDURE [ccall] (file: INTEGER): INTEGER;
    time*          : PROCEDURE [ccall] (ptr: INTEGER): INTEGER;

    clock_gettime* : PROCEDURE [ccall] (clock_id: INTEGER; VAR tp: TP): INTEGER;


PROCEDURE dlopen* (filename: ARRAY OF CHAR): INTEGER;
    RETURN API.dlopen(SYSTEM.ADR(filename[0]), 1)
END dlopen;


PROCEDURE dlsym* (handle: INTEGER; symbol: ARRAY OF CHAR): INTEGER;
    RETURN API.dlsym(handle, SYSTEM.ADR(symbol[0]))
END dlsym;


PROCEDURE GetArg* (n: INTEGER; VAR s: ARRAY OF CHAR);
VAR
    i, len, ptr: INTEGER;
    c: CHAR;

BEGIN
    i := 0;
    len := LEN(s) - 1;
    IF (0 <= n) & (n <= argc + envc) & (n # argc) & (len > 0) THEN
        SYSTEM.GET(API.MainParam + (n + 1) * SIZE_OF_DWORD, ptr);
        REPEAT
            SYSTEM.GET(ptr, c);
            s[i] := c;
            INC(i);
            INC(ptr)
        UNTIL (c = 0X) OR (i = len)
    END;
    s[i] := 0X
END GetArg;


PROCEDURE GetEnv* (n: INTEGER; VAR s: ARRAY OF CHAR);
BEGIN
    IF (0 <= n) & (n < envc) THEN
        GetArg(n + argc + 1, s)
    ELSE
        s[0] := 0X
    END
END GetEnv;


PROCEDURE init;
VAR
    ptr: INTEGER;

BEGIN

    envc := -1;
    SYSTEM.GET(API.MainParam, argc);
    REPEAT
        SYSTEM.GET(API.MainParam + (envc + argc + 3) * SIZE_OF_DWORD, ptr);
        INC(envc)
    UNTIL ptr = 0;

    libc := API.libc;

    stdout := API.stdout;
    stdin  := API.stdin;
    stderr := API.stderr;

    malloc := API.malloc;
    free   := API.free;
    exit   := API._exit;
    puts   := API.puts;
    fwrite := API.fwrite;
    fread  := API.fread;
    fopen  := API.fopen;
    fclose := API.fclose;
    time   := API.time;

    librt := API.librt;

    clock_gettime := API.clock_gettime;

END init;


BEGIN
    init
END LINAPI.