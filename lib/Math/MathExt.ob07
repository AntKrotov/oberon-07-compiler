(* ********************************
   Дополнение к модулю Math.
   Вадим Исаев, 2020
   Additional functions to the module Math.
   Vadim Isaev, 2020
   ******************************** *)

MODULE MathExt;

IMPORT Math, MathBits;

(* Квадрат целого числа.
   Square integer *)
PROCEDURE sqri* (x: INTEGER): INTEGER;
BEGIN
  RETURN x * x
END sqri;

(* Квадрат числа с плавающей точкой.
   Square real *)
PROCEDURE sqrr* (x: REAL): REAL;
BEGIN
  RETURN x * x
END sqrr;

(* Число с плавающей точкой в целой степени.
   Integer power *)
PROCEDURE intpower* (base : REAL; exponent : INTEGER): REAL;
VAR
  i: INTEGER;
  a: REAL;
BEGIN
  a := 1.0;

  IF (base = 0.0) & (exponent > 0) THEN
    a := 0.0;
  END;
  IF (base # 0.0) & (exponent = 0) THEN
    a := FLT(Math.sgn(base));
  END;

  IF (base # 0.0) & (exponent = 1) THEN
    a := base;
  END;

  IF (base # 0.0) & (exponent # 0) THEN
    IF exponent<0 THEN
      base:=1.0/base;
    END;
    i:=ABS(exponent);
    WHILE i>0 DO
      WHILE MathBits.iand(i, 1)=0 DO
        i := LSR(i, 1);
        base:= sqrr(base);
      END;
      DEC(i);
      a := a*base;
    END;
  END;

  RETURN a
END intpower;

(* Арктангенс y/x.
   Return arctangent of (y/x) *)
PROCEDURE arctan2* (y,x : REAL) : REAL;
VAR
  result: REAL;
BEGIN
  IF x=0.0 THEN
    IF y=0.0 THEN
      result:=0.0
    ELSIF y>0.0 THEN
           result:=Math.pi/2.0
    ELSIF y<0.0 THEN
           result:=-Math.pi/2.0;
    END
  ELSE
    result:=Math.arctan(y/x);
  END;

  IF x<0.0 THEN
    result:=result+Math.pi;
  END;
  IF result>Math.pi THEN
    result:=result-2.0*Math.pi;
  END;

  RETURN result
END arctan2;

(* Перевод из градусов в радианы.
   Convert angle from degree to radians *)
PROCEDURE DegToRad* (x: REAL): REAL;
BEGIN
  RETURN (x*Math.pi)/180.0
END DegToRad;

(* Перевод из радиан в градусы.
   Convert angle from radians to degree *)
PROCEDURE RadToDeg* (x: REAL): REAL;
BEGIN
  RETURN (x*180.0)/Math.pi
END RadToDeg;

(* Гипотенуза треугольника.
   Return hypotenuse of triangle *)
PROCEDURE hypot* (x, y: REAL): REAL;
VAR
  a: REAL;
BEGIN
  x := ABS(x);
  y := ABS(y);
  IF x>y THEN
    a := x*Math.sqrt(1.0+sqrr(y/x))
  ELSE
    IF (x>0.0) THEN
      a := y*Math.sqrt(1.0+sqrr(x/y))
    ELSE
      a := y;
    END;
  END;

  RETURN a
END hypot;

(* Евклидова норма.
   Return Euclidean norm *)
PROCEDURE norm* (data: ARRAY OF REAL; Count: INTEGER): REAL;
VAR
  a: REAL;
  i: INTEGER;
BEGIN
  a:=0.0;
  FOR i:=0 TO Count-1 DO
    a := a+sqrr(data[i]);
  END;

  RETURN Math.sqrt(a)
END norm;


END MathExt.
