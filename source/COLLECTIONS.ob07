(*
    BSD 2-Clause License

    Copyright (c) 2018-2019, Anton Krotov
    All rights reserved.
*)

MODULE COLLECTIONS;

IMPORT Out;

TYPE

    (* Элемент коллекции. Поле "link" содержит ссылку на свой же тип в
        качестве продолжения цепочки *)
    ITEM* = POINTER TO RECORD

        link: ITEM

    END;

    (* Коллекция содержит "голову" всей цепочки *)
    COLLECTION* = POINTER TO RECORD

        last: ITEM

    END;


(* push -- добавляет в коллецию элемент.
    Элемент голову коллекции пристраивает себе в хвост,
    а сам становится голвоой коллекции. Поэтому элемент
    НЕ МОЖЕТ быть NIL. #TODO: не хватает проверок на то, что коллекция
    не NIL и элемент не NIL. Ошибка вываливается ВО ВРЕМЯ РАБОТЫ. *)
PROCEDURE push* (collection: COLLECTION; item: ITEM);
BEGIN
    item.link := collection.last;
    collection.last := item
END push;


PROCEDURE pop* (collection: COLLECTION): ITEM;
VAR
    item: ITEM;

BEGIN
    item := collection.last;
    IF item # NIL THEN
        collection.last := item.link
    END

    RETURN item
END pop;


PROCEDURE create* (): COLLECTION;
VAR
    collection: COLLECTION;

BEGIN
    NEW(collection);
    collection.last := NIL

    RETURN collection
END create;

(* --------- TESTING ------------ *)
PROCEDURE test*():BOOLEAN;
    VAR
        collection: COLLECTION;
        res: BOOLEAN;
        item: ITEM;
    BEGIN
        Out.String("test.COLLECTIONS.create()");Out.Ln;
        collection := create();
        IF collection = NIL THEN
            Out.String("test.COLLECTIONS.create(): collection = NIL");Out.Ln;
            res := FALSE;
        END;
        IF collection.last # NIL THEN
            Out.String("test.COLLECTIONS.create(): collection.last # NIL");Out.Ln;
            res := FALSE;
        END;
        Out.String("test.COLLECTIONS.push()");Out.Ln;
        push(collection, item);
        IF collection.last # item THEN
            Out.String("test.COLLECTIONS.push(): collection.last # item");Out.Ln;
            res := FALSE;
        END;
        RETURN res
END test;

END COLLECTIONS.