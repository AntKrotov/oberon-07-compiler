(*
    BSD 2-Clause License

    Copyright (c) 2018, Anton Krotov
    All rights reserved.
*)

MODULE WRITER;

IMPORT FILES, ERRORS, MACHINE;


TYPE

    FILE* = FILES.FILE;
    
    
VAR

    counter*: INTEGER;


PROCEDURE align (n, _align: INTEGER): INTEGER;
BEGIN
    IF n MOD _align # 0 THEN
        n := n + _align - (n MOD _align)
    END

    RETURN n
END align;


PROCEDURE Write* (file: FILE; chunk: ARRAY OF BYTE; bytes: INTEGER; VAR pos: INTEGER);
VAR
    n: INTEGER;

BEGIN
    n := FILES.fwrite(file, chunk, bytes);
    IF n # bytes THEN
        ERRORS.error1("writing file error")
    END;
    INC(pos, n);
    INC(counter, n)
END Write;


PROCEDURE WriteByte* (file: FILE; n: BYTE; VAR pos: INTEGER);
VAR
    a: ARRAY 1 OF BYTE;

BEGIN
    a[0] := n;
    Write(file, a, 1, pos)
END WriteByte;


PROCEDURE Write32LE* (file: FILE; n: INTEGER; VAR pos: INTEGER);
VAR
    i: INTEGER;

BEGIN
    FOR i := 0 TO 3 DO
        WriteByte(file, MACHINE.Byte(n, i), pos)
    END
END Write32LE;


PROCEDURE Write16LE* (file: FILE; n: INTEGER; VAR pos: INTEGER);
BEGIN
    WriteByte(file, MACHINE.Byte(n, 0), pos);
    WriteByte(file, MACHINE.Byte(n, 1), pos)
END Write16LE;


PROCEDURE Padding* (file: FILE; FileAlignment: INTEGER; VAR pos: INTEGER);
VAR
    i: INTEGER;

BEGIN
    i := align(pos, FileAlignment) - pos;
    WHILE i > 0 DO
        WriteByte(file, 0, pos);
        DEC(i)
    END
END Padding;


PROCEDURE Create* (FileName: ARRAY OF CHAR): FILE; 
BEGIN 
    counter := 0
    RETURN FILES.fcreate(FileName)
END Create;


PROCEDURE Close* (VAR file: FILE);
BEGIN
    FILES.fclose(file)
END Close;


END WRITER.