(*
    BSD 2-Clause License

    Copyright (c) 2018, Anton Krotov
    All rights reserved.
*)

MODULE TEXTDRV;

IMPORT UTILS;


CONST

    CR = 0DX; LF = 0AX;

    CHUNK = 1024 * 64;


TYPE

    TEXT* = POINTER TO RECORD

        chunk:        ARRAY CHUNK OF CHAR;
        pos, size:    INTEGER;
        file:         UTILS.FILE;
        utf8:         BOOLEAN;
        CR:           BOOLEAN;

        line*, col*:  INTEGER;
        eof*:         BOOLEAN;
        eol*:         BOOLEAN;

        open*:        PROCEDURE (text: TEXT; name: ARRAY OF CHAR): BOOLEAN;
        peak*:        PROCEDURE (text: TEXT): CHAR;
        next*:        PROCEDURE (text: TEXT)

    END;


PROCEDURE reset (text: TEXT);
BEGIN
    text.chunk[0] := 0X;
    text.pos  := 0;
    text.size := 0;
    text.file := NIL;
    text.utf8 := FALSE;
    text.CR   := FALSE;
    text.line := 1;
    text.col  := 1;
    text.eof  := FALSE;
    text.eol  := FALSE
END reset;


PROCEDURE peak (text: TEXT): CHAR;
    RETURN text.chunk[text.pos]
END peak;


PROCEDURE load (text: TEXT);
BEGIN
    IF ~text.eof THEN
        text.size := UTILS.fread(text.file, text.chunk, LEN(text.chunk));
        text.pos := 0;
        IF text.size = 0 THEN
            text.eof := TRUE;
            text.chunk[0] := 0X
        END
    END
END load;


PROCEDURE next (text: TEXT);
VAR
    c: CHAR;
BEGIN
    IF text.pos < text.size - 1 THEN
        INC(text.pos)
    ELSE
        load(text)
    END;

    IF ~text.eof THEN

        c := peak(text);

        IF c = CR THEN
            INC(text.line);
            text.col  := 0;
            text.eol  := TRUE;
            text.CR   := TRUE
        ELSIF c = LF THEN
            IF ~text.CR THEN
                INC(text.line);
                text.col  := 0;
                text.eol  := TRUE
            ELSE
                text.eol  := FALSE
            END;
            text.CR := FALSE
        ELSE
            text.eol  := FALSE;
            IF text.utf8 THEN
                IF (c < 80X) OR (c > 0BFX) THEN
                    INC(text.col)
                END
            ELSE
                INC(text.col)
            END;
            text.CR := FALSE
        END

    END

END next;


PROCEDURE init (text: TEXT);
BEGIN

    IF (text.pos = 0) & (text.size >= 3) THEN
        IF (text.chunk[0] = 0EFX) &
           (text.chunk[1] = 0BBX) &
           (text.chunk[2] = 0BFX) THEN
            next(text);
            next(text);
            next(text);
            text.utf8 := TRUE
        END
    END;

    IF text.size = 0 THEN
        text.chunk[0] := 0X;
        text.size := 1;
        text.eof := FALSE
    END;

    text.line := 1;
    text.col  := 1

END init;


PROCEDURE open (text: TEXT; name: ARRAY OF CHAR): BOOLEAN;
BEGIN
    ASSERT(text # NIL);

    reset(text);
    text.file := UTILS.fopen(name);
    IF text.file # NIL THEN
        load(text);
        init(text)
    END

    RETURN text.file # NIL
END open;


PROCEDURE create* (): TEXT;
VAR
    text: TEXT;
BEGIN
    NEW(text);
    reset(text);
    text.open := open;
    text.peak := peak;
    text.next := next

    RETURN text
END create;


PROCEDURE destroy* (VAR text: TEXT);
BEGIN
    IF text # NIL THEN
        IF text.file # NIL THEN
            UTILS.fclose(text.file)
        END;
        DISPOSE(text)
    END
END destroy;


END TEXTDRV.