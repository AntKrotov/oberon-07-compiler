(*
    BSD 2-Clause License

    Copyright (c) 2020, Anton Krotov
    All rights reserved.
*)

MODULE HEX;

IMPORT WRITER, CHL := CHUNKLISTS;


PROCEDURE hexdgt (n: BYTE): BYTE;
BEGIN
    IF n < 10 THEN
        n := n + ORD("0")
    ELSE
        n := n - 10 + ORD("A")
    END

    RETURN n
END hexdgt;


PROCEDURE Byte (byte: BYTE);
BEGIN
    WRITER.WriteByte(hexdgt(byte DIV 16));
    WRITER.WriteByte(hexdgt(byte MOD 16));
    INC(WRITER.file.chksum, byte)
END Byte;


PROCEDURE NewLine;
BEGIN
    Byte((-WRITER.file.chksum) MOD 256);
    WRITER.file.chksum := 0;
    WRITER.WriteByte(0DH);
    WRITER.WriteByte(0AH)
END NewLine;


PROCEDURE StartCode;
BEGIN
    WRITER.WriteByte(ORD(":"));
    WRITER.file.chksum := 0
END StartCode;


PROCEDURE Data* (mem: ARRAY OF BYTE; idx, cnt: INTEGER);
VAR
    i, len: INTEGER;

BEGIN
    WHILE cnt > 0 DO
        len := MIN(cnt, 16);
        StartCode;
        Byte(len);
        Byte(idx DIV 256);
        Byte(idx MOD 256);
        Byte(0);
        FOR i := 1 TO len DO
            Byte(mem[idx]);
            INC(idx)
        END;
        DEC(cnt, len);
        NewLine
    END
END Data;


PROCEDURE ExtLA* (LA: INTEGER);
BEGIN
    ASSERT((0 <= LA) & (LA <= 0FFFFH));
    StartCode;
    Byte(2);
    Byte(0);
    Byte(0);
    Byte(4);
    Byte(LA DIV 256);
    Byte(LA MOD 256);
    NewLine
END ExtLA;


PROCEDURE Data2* (mem: CHL.BYTELIST; idx, cnt, LA: INTEGER);
VAR
    i, len, offset: INTEGER;

BEGIN
    ExtLA(LA);
    offset := 0;
    WHILE cnt > 0 DO
        ASSERT(offset <= 65536);
        IF offset = 65536 THEN
            INC(LA);
            ExtLA(LA);
            offset := 0
        END;
        len := MIN(cnt, 16);
        StartCode;
        Byte(len);
        Byte(offset DIV 256);
        Byte(offset MOD 256);
        Byte(0);
        FOR i := 1 TO len DO
            Byte(CHL.GetByte(mem, idx));
            INC(idx);
            INC(offset)
        END;
        DEC(cnt, len);
        NewLine
    END
END Data2;


PROCEDURE End*;
BEGIN
    StartCode;
    Byte(0);
    Byte(0);
    Byte(0);
    Byte(1);
    NewLine
END End;


END HEX.