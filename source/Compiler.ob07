(*
    BSD 2-Clause License

    Copyright (c) 2018, Anton Krotov
    All rights reserved.
*)

MODULE Compiler;

IMPORT STATEMENTS, TARGETS, PARS, UTILS, PATHS, CONSOLE, ERRORS, STRINGS, VER, WRITER;


CONST

    EXT = ".ob07";


PROCEDURE Target (s: ARRAY OF CHAR): INTEGER;
VAR
    res: INTEGER;

BEGIN
    IF s = "con" THEN
        res := TARGETS.CON
    ELSIF s = "gui" THEN
        res := TARGETS.GUI
    ELSIF s = "dll" THEN
        res := TARGETS.DLL
    ELSIF s = "kos" THEN
        res := TARGETS.KOS
    ELSIF s = "obj" THEN
        res := TARGETS.OBJ
    ELSE
        res := 0
    END

    RETURN res
END Target;


PROCEDURE main;
VAR
    path:     PARS.PATH;
    inname:   PARS.PATH;
    ext:      PARS.PATH;
    app_path: PARS.PATH;
    lib_path: PARS.PATH;
    modname:  PARS.PATH;
    outname:  PARS.PATH;
    param:    PARS.PATH;
    temp:     PARS.PATH;

    target:   INTEGER;

    major,
    minor:    INTEGER;
    stack:    INTEGER;

    time:     INTEGER;

BEGIN

    PATHS.GetCurrentDirectory(app_path);
    lib_path := app_path;

    UTILS.GetArg(1, inname);
    IF inname = "" THEN
        CONSOLE.String("Akron Oberon-07/16 Compiler v"); CONSOLE.Int(VER.Major); CONSOLE.String("."); CONSOLE.Int2(VER.Minor); CONSOLE.Ln;
        CONSOLE.String("Usage: Compiler <inputfile> <outputfile> <target> [stack size (Mb)]"); CONSOLE.Ln;
        CONSOLE.String("target = 'con' | 'gui' | 'dll' | 'kos' | 'obj'"); CONSOLE.Ln;
        UTILS.Exit(0)
    END;

    PATHS.split(inname, path, modname, ext);
    IF ext # EXT THEN
        ERRORS.error3("inputfile name extension must be '", EXT, "'")
    END;
    IF PATHS.isRelative(path) THEN
        PATHS.RelPath(app_path, path, temp);
        path := temp
    END;

    UTILS.GetArg(2, outname);
    IF outname = "" THEN
        ERRORS.error1("not enough parameters")
    END;
    IF PATHS.isRelative(outname) THEN
        PATHS.RelPath(app_path, outname, temp);
        outname := temp
    END;

    UTILS.GetArg(3, param);
    IF param = "" THEN
        ERRORS.error1("not enough parameters")
    END;

    target := Target(param);
    IF target = TARGETS.OBJ THEN
        ERRORS.error1("'obj' not supported yet")
    END;

    IF target = 0 THEN
        ERRORS.error1("bad parameter <target>")
    END;

    PARS.program.dll := target IN {TARGETS.DLL, TARGETS.OBJ};
    PARS.program.obj := target = TARGETS.OBJ;

    STRINGS.append(lib_path, "lib");
    STRINGS.append(lib_path, UTILS.slash);

    IF target IN {TARGETS.CON, TARGETS.GUI, TARGETS.DLL} THEN
        stack := 1;

        STRINGS.append(lib_path, "Windows32");
        STRINGS.append(lib_path, UTILS.slash);

        IF target IN {TARGETS.CON, TARGETS.GUI} THEN
            UTILS.GetArg(4, param);
            IF param # "" THEN
                IF ~(STRINGS.StrToInt(param, stack) & (1 <= stack) & (stack <= 32)) THEN
                    stack := 1
                END
            END
        END

    ELSIF target IN {TARGETS.KOS, TARGETS.OBJ} THEN
        stack := 1;
        major := 1;
        minor := 0;

        STRINGS.append(lib_path, "KolibriOS");
        STRINGS.append(lib_path, UTILS.slash);

        UTILS.GetArg(4, param);
        IF param # "" THEN
            IF target = TARGETS.KOS THEN
                IF ~(STRINGS.StrToInt(param, stack) & (1 <= stack) & (stack <= 32)) THEN
                    stack := 1
                END
            ELSIF target = TARGETS.OBJ THEN
                IF ~(STRINGS.StrToVer(param, major, minor) & (0 <= major) & (major <= 65535) & (0 <= minor) & (minor <= 65535)) THEN
                    major := 1;
                    minor := 0
                END
            END
        END

    END;

    STATEMENTS.do(path, lib_path, modname, outname, EXT, target, major, minor, stack);

    time := UTILS.GetTickCount() - UTILS.time;

    CONSOLE.Int(time DIV 100); CONSOLE.String("."); CONSOLE.Int2(time MOD 100); CONSOLE.String(" sec, ");
    CONSOLE.Int(WRITER.counter); CONSOLE.String(" bytes"); CONSOLE.Ln;
    
    UTILS.Exit(0)
END main;

BEGIN
    main
END Compiler.