(*
    BSD 2-Clause License

    Copyright (c) 2018, Anton Krotov
    All rights reserved.
*)

MODULE KOS;

IMPORT BIN, WR := WRITER;


CONST

    HEADER_SIZE = 36;


TYPE

    FILE = WR.FILE;

    HEADER = RECORD

        menuet01: ARRAY 9 OF CHAR;
        ver, start, size, mem, sp, param, path: INTEGER

    END;


PROCEDURE align (n, _align: INTEGER): INTEGER;
BEGIN
    IF n MOD _align # 0 THEN
        n := n + _align - (n MOD _align)
    END

    RETURN n
END align;


PROCEDURE write* (program: BIN.PROGRAM; FileName: ARRAY OF CHAR);

CONST

    PARAM_SIZE    = 2048;
    FileAlignment = 16;


VAR
    header: HEADER;

    base, text, data, idata, bss: INTEGER;

    libcount: INTEGER;
    import:   BIN.IMPRT;

    ImportTable: ARRAY 2000 OF INTEGER; i: INTEGER;
    procoffs: INTEGER;

    reloc:   BIN.RELOC;
    iproc:   BIN.IMPRT;
    L:       INTEGER;
    delta:   INTEGER;

    File: FILE; pos: INTEGER;


BEGIN
    base := 0;

    text  := base + HEADER_SIZE;
    data  := align(text + program.ccount, FileAlignment);
    idata := align(data + program.dcount, FileAlignment);

    libcount  := 0;
    import := program.imp_list.first(BIN.IMPRT);
    WHILE import # NIL DO
        IF import.label = 0 THEN
            INC(libcount)
        END;
        import := import.next(BIN.IMPRT)
    END;

    procoffs := libcount * 2 + 2;

    i := 0;
    import := program.imp_list.first(BIN.IMPRT);
    WHILE import # NIL DO

        IF import.label = 0 THEN
            ImportTable[procoffs] := 0;
            INC(procoffs);
            ImportTable[i] := idata + procoffs * 4;
            INC(i);
            ImportTable[i] := import.nameoffs + data;
            INC(i)
        ELSE
            ImportTable[procoffs] := import.nameoffs + data;
            import.label := procoffs * 4;
            INC(procoffs)
        END;

        import := import.next(BIN.IMPRT)
    END;
    ImportTable[procoffs] := 0;
    ImportTable[i] := 0;
    ImportTable[i + 1] := 0;

    bss := align(idata + (procoffs + 1) * 4, FileAlignment);

    header.menuet01 := "MENUET01";
    header.ver      :=  1;
    header.start    :=  text;
    header.size     :=  idata + (procoffs + 1) * 4 - base;
    header.mem      :=  align(header.size + program.stack + program.bss + PARAM_SIZE * 2 + 4096, FileAlignment);
    header.sp       :=  base + header.mem - PARAM_SIZE * 2;
    header.param    :=  header.sp;
    header.path     :=  header.param + PARAM_SIZE;


    reloc := program.rel_list.first(BIN.RELOC);
    WHILE reloc # NIL DO

        L := BIN.get32le(program.code, reloc.offset);
        delta := 3 - reloc.offset - text;

        CASE reloc.opcode OF
        |BIN.RJMP:      

        |BIN.RIMP:
              iproc := BIN.GetIProc(program, L);
              BIN.put32le(program.code, reloc.offset, idata + iproc.label)

        |BIN.RBSS:
              BIN.put32le(program.code, reloc.offset, L + bss)

        |BIN.RDATA:
              BIN.put32le(program.code, reloc.offset, L + data)

        |BIN.RCODE:
              BIN.put32le(program.code, reloc.offset, L + text)

        |BIN.PICDATA:
              BIN.put32le(program.code, reloc.offset, L + data + delta)

        |BIN.PICCODE:
              BIN.put32le(program.code, reloc.offset, L + text + delta)

        |BIN.PICBSS:
              BIN.put32le(program.code, reloc.offset, L + bss  + delta)

        |BIN.PICIMP:
              iproc := BIN.GetIProc(program, L);
              BIN.put32le(program.code, reloc.offset, idata + iproc.label + delta)

        |BIN.IMPTAB:
              BIN.put32le(program.code, reloc.offset, idata + delta)

        END;

        reloc := reloc.next(BIN.RELOC)
    END;

    File := WR.Create(FileName);

    pos := 0;

    FOR i := 0 TO 7 DO
        WR.WriteByte(File, ORD(header.menuet01[i]), pos)
    END;

    WR.Write32LE(File, header.ver,    pos);
    WR.Write32LE(File, header.start,  pos);
    WR.Write32LE(File, header.size,   pos);
    WR.Write32LE(File, header.mem,    pos);
    WR.Write32LE(File, header.sp,     pos);
    WR.Write32LE(File, header.param,  pos);
    WR.Write32LE(File, header.path,   pos);

    WR.Write(File, program.code, program.ccount, pos);
    WR.Padding(File, FileAlignment, pos);

    WR.Write(File, program.data, program.dcount, pos);
    WR.Padding(File, FileAlignment, pos);

    FOR i := 0 TO procoffs DO
        WR.Write32LE(File, ImportTable[i], pos)
    END;

    WR.Close(File)

END write;


END KOS.